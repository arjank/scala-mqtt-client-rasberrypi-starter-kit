{
  "name": "Scala-mqtt-client-rasberrypi-starter-kit",
  "tagline": "A simple mqtt client application implemented in scala for M2M communications.",
  "body": "# scala-mqtt-client-rasberrypi-starter-kit\r\nA simple mqtt client application implemented in scala for M2M communications.\r\n\r\n##What we'll build \r\nA solution where the Dev_Raspi can send events to the broker and the Dev_Laptop can subscribe to the event, in which the RaspberryPi will send its temperature events to the Broker and the subscriber will listen to it\r\n\r\n##Steps to get started:\r\n  1.This project will use Mosquitto as a broker. So if you have not installed mosquitto please follow the links here  (https://mosquitto.org/download/)\r\n  2. We are considering here two device solution : Dev_Laptop (Subscriber) and Dev_RasberryPi (Publisher)\r\n  3. So start your Mosquitto on Dev_Laptop.\r\n  4.Configure the application.conf with the port and the url of the mosquitto server. \r\n  5. Make a assembly jar of this project using the following command.\r\n\r\n    sbt assembly\r\n  \r\n  6. Copy the jar to RaspberryPi using the scp command.\r\n\r\n      scp raspi-mqtt-client.jar pi@<pi-ip-address>:/home/pi/Projects/scala\r\n  \r\n  7. Run the Publisher on Dev_RaspberryPi using the following command\r\n  \r\n      java -cp raspi-mqtt-client.jar com.knoldus.Publisher\r\n\r\n    This will start the publisher to sending the temperature events to broker. \r\n  \r\n  8. Run the Subscriber on Dev_Laptop using the following command\r\n  \r\n      java -cp raspi-mqtt-client.jar com.knoldus.Subscriber\r\n\r\n##Sumary \r\n\r\nHurray ! You have successfully developed a sample IOT application :)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}